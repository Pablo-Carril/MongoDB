<div class="col-9 mt-1"> <!-- con esto consegu√≠ achicar la tabla -->

  <table id="historial" class="table table-bordered lh1" style="font-size: 0.95rem;">
    <thead>
      <tr>
        <th class="col-1">Equipo</th>
        <th class="col-1">Serie</th>
        <th class="col-1">Fecha</th>
        <th class="col-1">Linea</th>
        <th class="col-1">Coche</th>
        <th class="col-md-auto">Problema</th>
        <th class="col-1">Caso</th>
        <th class="col-1">Vino</th>
        <th class="col-1 text-muted">Edit</th>
      </tr>
    </thead>
    <tbody>
      {{#each equipos}}
      <tr>
        <td class="fw-bold" style="color: {{colorOpcion this.equipo}};">{{this.equipo}}</td>
        <td class="fw-bold" style="color: {{colorOpcion this.equipo}};">{{this.serie}}</td>
        <td>{{this.fecha}}</td>
        <td>{{this.linea}}</td>
        <td>{{this.coche}}</td>
        <td class="problema">{{this.problema}}</td>
        <!-- el nowrap impide que se achique,as√≠ que no act√∫a el hidden. text-overflow: ellipsis; PERO parece que el problema es que no hay forma de achicar esa columna. tooltip-show -->
        <td>{{this.caso}}</td>
        <td>
          {{#if this.caso}}
          <button class="entregado-btn" data-id="{{_id}}" style="border: none; background: none;">
            <!-- HAY que usar CLASS si o si. no sirve id -->
            {{#if this.entregado}}
            <span class="ms-2">‚úÖ</span>
            {{else}}
            <span class="ms-2">‚ö™</span>
            {{/if}}
          </button>
          {{/if}}

        </td>
        <td>
          <a href="edit/{{_id}}" style="text-decoration: none; font-weight: bold;">üóÅ</a>
          <!--  _id es el del documento FUNCIONA! -->
          <!--  <i class="fas fa-pencil"></i>  trat√© de poner un √≠cono pero falta FONT AWESOME -->
        </td>
      </tr>
      {{/each}}



    </tbody>
  </table>

  <!-- <input type="hidden" id="filaSeleccionada">  -->
</div>

<style>
  .problema {
    white-space: nowrap;
    /* evita el salto de l√≠nea */
    text-overflow: ellipsis;
    /* agrega puntos suspensivos... no funciona sin el nowrap */
    overflow-x: hidden;
    /* oculta el texto que se desborda. con auto me agrega la barra de scroll */
    min-width: 200px;
    max-width: 400px;
  }

  .problema:hover {
    white-space: normal;
    /* Permite que el texto se muestre completo */
    overflow: visible;
    /* Muestra todo el texto */
    z-index: 999;
    /* Asegura que el texto completo est√© encima de otras filas */
    position: absolute;
    /* Permite que el texto completo se muestre sobre otras filas */
    background-color: white;
    /* Fondo blanco para mayor claridad */
    border: 1px solid #666;
  }

  th {
    font-weight: 600;
  }
</style>

<script>
  
  document.addEventListener('DOMContentLoaded', function () {
    const buttons = document.querySelectorAll('.entregado-btn');

    // Selecciona todos los botones. tiene que ser con class ya que id aqu√≠ no servir√≠a.
    buttons.forEach(button => {
      button.addEventListener('click', function () {    //no usamos funci√≥n flecha para poder usar .this en cada bot√≥n. si lo usara con flecha se referir√≠a al contexto 
        const spinnerContainer = document.querySelector('.spinner-container');
        spinnerContainer.classList.remove('escondido') // Muestra el Spinner

        const id = this.dataset.id;
        const url = `/entregado/${id}`;

        fetch(url, {
          method: 'POST',
          // headers: {
          //   'Content-Type': 'application/json' //no hace falta ya que enviamos el dato por la url
          // }
        })
          .then(response => {
            if (!response.ok) {
              throw new Error('Error en la solicitud');
            }
            return response.json();
          })
          .then(data => {     
            // ahora lo puedo hacer sin recargar!!! podr√≠a hacerlo en las otras solicitudes!
            // Actualizar el estado del bot√≥n seg√∫n la respuesta:
            if (data.entregado) {     //ahora el servidor contesta con el estado de entregado!
              this.querySelector('span').textContent = '‚úÖ';
            } else {
              this.querySelector('span').textContent = '‚ö™';
            }
            spinnerContainer.classList.add('escondido'); // Ocultar el spinner
          })
          .catch(error => {
            console.error('Error:', error);
            spinnerContainer.classList.add('escondido'); // Ocultar el spinner en caso de error
          });
      });
    });
  });
</script>