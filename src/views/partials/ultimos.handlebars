<div class="row mt-1">

  <div id="ultimos" class="col-12">
    <table class="table table-bordered lh-1 col-12" style="font-size: 0.95rem;">
      <thead>
        <tr>
          <th class="col-1">Equipo</th>
          <th class="col-1">Serie</th>
          <th class="col-1">Fecha</th>
          <th class="col-1">Linea</th>
          <th class="col-1">Coche</th>
          <th class="col-md-auto">Problema</th>
          <th class="col-1">Caso</th>
          <th class="col-1">Entregado</th>
        </tr>
      </thead>
      <tbody>
        {{#each equipos}}
        <tr>
          <td class="fw-bold" style="color: {{colorOpcion this.equipo}};">{{this.equipo}}</td>
          <td class="fw-bold" style="color: {{colorOpcion this.equipo}};">{{this.serie}}</td>
          <td style="white-space: nowrap;">{{this.fecha}}</td>
          <td style="color: {{colorOpcion this.linea}};">{{this.linea}}</td>
          <td>{{this.coche}}</td>
          <td class="problema">{{this.problema}}</td>
          <td>{{this.caso}}</td>
          <td>
            <!-- <form action="entregado/_id" method="post">  -->
            {{#if this.caso}}
            <button class="entregado-btn" data-id="{{_id}}" style="border: none; background: none;">
              <!-- HAY que usar CLASS si o si. no sirve id -->
              {{#if this.entregado}}
              <span class="ms-2">✅</span>
              {{else}}
              <span class="ms-2">⚪</span>
              {{/if}}
            </button>
            {{/if}}

          </td>
        </tr>
        {{/each}}
      </tbody>
    </table>
  </div>


</div>

<style>
  .problema {
    white-space: nowrap;
    /* evita el salto de línea */
    text-overflow: ellipsis;
    /* agrega puntos suspensivos... no funciona sin el nowrap */
    overflow-x: hidden;
    /* oculta el texto que se desborda. con auto me agrega la barra de scroll */
    min-width: 200px;
    max-width: 400px;
    /* background-color: #1f55b4; */
  }

  .problema:hover {
    white-space: normal;
    /* Permite que el texto se muestre completo */
    overflow: visible;
    /* Muestra todo el texto */
    z-index: 999;
    /* Asegura que el texto completo esté encima de otras filas */
    position: absolute;
    /* Permite que el texto completo se muestre sobre otras filas */
    background-color: white;
    /* Fondo blanco para mayor claridad */
    border: 1px solid orange;
  }
</style>

<script>
  // Espero a que el DOM esté completamente cargado
  document.addEventListener('DOMContentLoaded', function () {
    const buttons = document.querySelectorAll('.entregado-btn');

    // Selecciona todos los botones. tiene que ser con class ya que id aquí no serviría.
    buttons.forEach(button => {
      button.addEventListener('click', function () {    //no usamos función flecha para poder usar .this en cada botón. si lo usara con flecha se referiría al contexto 
        const spinnerContainer = document.querySelector('.spinner-container');
        spinnerContainer.classList.remove('escondido') // Muestra el Spinner

        const id = this.dataset.id;
        const url = `/entregado/${id}`;

        fetch(url, {
          method: 'POST',
          // headers: {
          //   'Content-Type': 'application/json' //no hace falta ya que enviamos el dato por la url
          // }
        })
          .then(response => {
            if (!response.ok) {
              throw new Error('Error en la solicitud');
            }
            return response.json();
          })
          .then(data => {
            //console.log('entregado:', data);
            //location.reload()  //esto funcionaba bien, pero ahora lo puedo hacer sin recargar!!! podría hacerlo en las otras solicitudes!
            // Actualizar el estado del botón según la respuesta:
            if (data.entregado) {     //ahora el servidor contesta con el estado de entregado!
              this.querySelector('span').textContent = '✅';
            } else {
              this.querySelector('span').textContent = '⚪';
            }
            spinnerContainer.classList.add('escondido'); // Ocultar el spinner
          })
          .catch(error => {
            console.error('Error:', error);
            spinnerContainer.classList.add('escondido'); // Ocultar el spinner en caso de error
          });
      });
    });
  });
</script>