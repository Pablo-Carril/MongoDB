<form id="formEntrada" action="/api/equipos" method="post">
  <!-- manejamos todo desde el Server. ahora usamos el action y Solicitudes HHTP (POST,get,put,delete).  <option value="{{elegido}}" selected>{{elegido}} </option>  -->
  <div class="form-group">
    <label for="equipoSelect">Equipo</label>
    <select id="equipoSelect" class="custom-select form-control fw-bold" name='equipo' required=""
      style="color: {{colorOpcion this.equipo}};" title="Seleccione el equipo">
      <option value=""></option>
        {{#each inventario}} 
         <option value="{{this}}" {{isSelected ../equipo this}}>{{this}}</option> 
        {{/each}}
    </select>

    <label for="serie">Numero de serie:</label>
    <input type="number" name="serie" id="serie" class="form-control fw-bold" min="1" max="999999"
      title="Numero de serie" style="color: {{colorOpcion this.equipo}};" required="">
    <label for="fecha">Fecha:</label> <!--Los label for = deben apuntar al id no al name  -->
    <input type="date" value='{{fechaActual}}' name="fecha" id="fecha" class="form-control"
      title="Fecha del Caso o del día que falló">

    <label for="linea">Linea:</label>
    <select name="linea" class="custom-select form-control" id="linea" title="Seleccione la línea" required="">
      <option value=""> </option>
      <option value="85">85</option>
      <option value="98">98</option>
      <option value="307">307</option>
      <option value="275">275</option>
    </select>
    <label for="coche">Interno:</label>
    <input type="number" value="{{coche}}" name="coche" id="coche" class="form-control" title="Numero de Interno">
    <label for="problema">Problema:</label>
    <div class="form-group">
      <textarea type="number" name="problema" id="problema" cols="30" rows="1" minlength="3" maxlength="150" required=""
        class="form-control" title="Ingrese el problema que presenta">{{problema}}</textarea>
    </div>
    <label for="caso">Caso:</label>
    <div class="form-group">
      <textarea name="caso" id="caso" cols="20" rows="1" minlength="6" maxlength="8"
        class="form-control mb-3">{{caso}}</textarea>
    </div>
    <button type="submit" class="btn btn-primary ms-4 text-white">Guardar</button>

  </div>
</form>

<style>
  .oculto {
    display: none;
  }

  #problema {
    white-space: nowrap;
    /* evita el salto de línea */
    text-overflow: ellipsis;
    /* agrega puntos suspensivos... no funciona sin el nowrap */
    overflow-x: hidden;
    /* oculta el texto que se desborda. con "auto" me agrega la barra de scroll */

    /*color: {{colorOpcion equipoElegido}};    ESTO FUNCIONA BIEN cuando retorno un color a mano desde el HELPER */
  }
</style>

<script>
  let numSerie = ""
  const serieInput = document.getElementById("serie")

  // al GUARDAR (submit): 
  const formEntrada = document.getElementById('formEntrada')
  formEntrada.addEventListener('submit', () => {
    event.preventDefault()  //prevenir el envío del formulario. ahora lo manejamos todo desde aquí

    const spinnerContainer = document.querySelector('.spinner-container');
    spinnerContainer.classList.remove('escondido') // Muestra el Spinner. cuando se actualize la página se oculta solo.

    const inputNumero = document.getElementById("serie");
    const valor = inputNumero.value;
    console.log(valor)
    // Usando el método slice()
    const valorSinCeros = valor.replace(/^0+/, "").slice(0)  //sacar ceros de la izquierda
    console.log(valorSinCeros)
    inputNumero.value = valorSinCeros;  //esto es necesario para que lo envíe por FormData

    const formDatos = new FormData(formEntrada)
    const datosJSON = JSON.stringify(Object.fromEntries(formDatos.entries())); 

    console.log("ejecuto fetch ")
    fetch('/api/equipos/', {       //Manejamos ahora el SUBMIT desde aquí
      method: 'POST',                            
      headers: {
        'Content-Type': 'application/json',
      },
      body: datosJSON,
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`Error de red - ${response.status}`);
        }
        return response.json(); 
      })
    .then(msg => {
      console.log('Se grabó:', msg)
      window.location.href =  '/ultimos'
      history.replaceState({}, '', `/api/equipos/{{serie}}`);  //evitamos que vuelva al formulario al retroceder la página. tienen que estar las dos líneas.    
      }) 
    .catch((error) => { console.log('Ocurrió un error: ', error) })

  })

  const equipoSelect = document.getElementById("equipoSelect")
  //Al cambiar de equipo cambiamos los colores
  equipoSelect.addEventListener('change', () => {
    // const spinnerContainer = document.querySelector('.spinner-container'); YA NO HACE FALTA SPINNER AQUI
    // spinnerContainer.classList.remove('escondido') // Muestra el Spinner. cuando se actualize la página se oculta solo.
    //Al cambiar de equipo cambiamos los colores:
  equipoElegido = equipoSelect.value

    fetch(`/color/${equipoElegido}`) 
    .then(response => response.json()) 
    .then(data => { 
      const color = data.color; 
      equipoSelect.style.color = color;
       equipoSelect.style.borderColor = color; 
       equipoSelect.style.borderWidth = '3px'; 
       serieInput.style.color = color; 
    //console.log(equipoElegido, ' color: ', color); 
    }) 
    .catch(error => console.error('Error:', error));


  })



</script>
