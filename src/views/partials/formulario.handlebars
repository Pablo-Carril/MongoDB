<form id="formEntrada" action="/api/equipos" method="post">
  <!-- manejamos todo desde el Server. ahora usamos el action y Solicitudes HHTP (POST,get,put,delete).  <option value="{{elegido}}" selected>{{elegido}} </option>  -->
  <div class="form-group">
    <label for="equipoSelect">Equipo</label>
    <select class="custom-select form-control fw-bold" name='equipo' id="equipoSelect" required=""
      style="color: {{colorOpcion this.equipo}};">
      <option value="">Todos</option> <!--al elegir todos el value queda vacío, entonces nos pide que eligamos otro  -->
      <option value="validador" {{isSelected equipo 'validador' }}>Validador</option>
      <!-- al EDITAR necesito isSelected equipo 'Validador' y al elegir uno necesito isSelected elegido 'Validador' DEJO EQUIPO Y MODIFICO EQUIPO POR EL VALOR DE ELEGIDO EN EL SERVER? -->
      <option value="teclado" {{isSelected equipo 'teclado' selected }}>Teclado</option>
      <option value="mountinKit" {{isSelected equipo 'mountinKit' }}>MountinKit</option>
      <option value="concentrador" {{isSelected equipo 'concentrador' }}>Concentrador</option>
      <option value="otros" {{isSelected equipo 'otros' }}>Otros</option>
    </select>
    <label for="serie">Numero de serie:</label>
    <input type="number" value="{{serie}}" name="serie" id="serie" class="form-control fw-bold" min="1" max="999999999"
      title="Numero de serie" style="color: {{colorOpcion this.equipo}};" required="" autofocus>
    <label for="fecha">Fecha:</label> <!--Los label for = deben apuntar al id no al name  -->
    <input type="date" value='{{fechaActual}}' name="fecha" id="fecha" class="form-control">

    <label for="linea">Linea:</label>
    <select name="linea" class="custom-select form-control" id="linea" required="">
      <option value=""> </option>
      <option value="85" {{isSelected linea '85' }}>85</option>
      <option value="98" {{isSelected linea '98' }}>98</option>
      <option value="307" {{isSelected linea '307' }}>307</option>
      <option value="275" {{isSelected linea '275' }}>275</option>
    </select>
    <label for="coche">Coche:</label>
    <input type="number" value="{{coche}}" name="coche" id="coche" class="form-control">
    <label for="problema">Problema:</label>
    <div class="form-group">
      <textarea type="number" name="problema" id="problema" cols="30" rows="1" minlength="3" maxlength="150" required=""
        class="form-control">{{problema}}</textarea>
    </div>
    <label for="caso">Caso:</label>
    <div class="form-group">
      <textarea name="caso" id="caso" cols="20" rows="1" minlength="6" maxlength="8"
        class="form-control mb-3">{{caso}}</textarea>
    </div>
    <button type="submit" class="btn btn-primary text-white {{#if ocultar}}oculto{{/if}} ">Guardar</button>
    <button id="consultar" class="btn btn-primary text-white ms-3 {{#if ocultar}}oculto{{/if}} ">Historial</button>
  </div>
</form>

<style>
  .oculto {
    display: none;
  }

  #problema {
    white-space: nowrap;
    /* evita el salto de línea */
    text-overflow: ellipsis;
    /* agrega puntos suspensivos... no funciona sin el nowrap */
    overflow-x: hidden;
    /* oculta el texto que se desborda. con "auto" me agrega la barra de scroll */

    /*color: {{colorOpcion equipoElegido}};    ESTO FUNCIONA BIEN cuando retorno un color a mano desde el HELPER */
  }
</style>

<script>
  let numSerie = ""
  const serieInput = document.getElementById("serie")
  serieInput.addEventListener('input', () => {       //cada vez que se presione una tecla captura lo escrito.
    numSerie = serieInput.value
    //console.log(numSerie)
  })
  serieInput.addEventListener('keypress', e => {       //al apretar ENTER consultamos mediante redirección url a ese serie.
    if (e.key == "Enter") {    // nesesito agregarlos a todos los input ??   SI ...A LA MAYORIA - NO PARA REDIRIGIR. PARA PASAR AL SIGUIENTE.
      if (numSerie) {
        var url = '/api/equipos/' + numSerie    //+ encodeURIComponent({{serie}});
        window.location.href = url
      }
      else { url = '#' }
      //e.preventDefault()
    }
  })

  //Al CONSULTAR
  //leemos el numero de serie ingresado por el usuario   //NO se puede acceder a Id's de otros Handlebars
  const consultarBtn = document.getElementById('consultar')
  consultarBtn.addEventListener('click', () => {
    const serieInput = document.getElementById('serie')     //leemos el serie ingresado. no se puede desde el servidor. 
    const serieNum = serieInput.value                     // SALVO que hagamos un formulario normal y nos evitamos todo este Javascript. HACERLO EN EL FUTURO
    if (serieNum) {                              //si se ingresó algo..
      var url = '/api/equipos/' + encodeURIComponent(serieNum);
    } else { url = '#' }
    //fetch(url)    //un fetch sería buena opción para enviar los datos por el body y no por la url
    console.log('{{elegido}}')    //ESTA ES LA FORMA DE leer una VARIABLE HANDLEBARS en JAVASCRIPT: entre comillas para que la trate como un string.
    window.location.href = url    //como el enlace tiene un # necesitamos darle la nueva url                    
  })

  const equipoSelect = document.getElementById("equipoSelect")
  //Al cambiar de equipo cambiamos los colores
  equipoSelect.addEventListener('change', () => {
    equipoElegido = equipoSelect.value
    //console.log(equipoElegido)
    const colores = {
      'validador': '#0d6efd',    //validadores                  
      'teclado': '#198754',      //teclados                     
      'mountinKit': '#BB0',      //MK
      'concentrador': '#fd7e14',   //concentradores
      'otros': '#555',             //otros
      '': '#333',                 //todos (que necesita estar vacío)
    };
    equipoSelect.style.color = colores[equipoElegido]
    equipoSelect.style.borderColor = colores[equipoElegido]
    equipoSelect.style.borderWidth = '3px'
    serieInput.style.color = colores[equipoElegido]
    //ENVIAMOS el equipoElegido al servidor:
    const dato = JSON.stringify({ 'equipo': equipoElegido })  //los datos AHORA llegan perfecto! al servidor
    console.log(dato)
    fetch('/equipoElegido', {   // + equipoElegido, { no hace falta mandarlo por la ruta. va por el body.
      method: 'POST',             //PORQUE si la ruta está mal el server me devuelve status 200 ????????
      headers: {
        'Content-Type': 'application/json',   //sin esto no anda.
      },
      body: dato,
    })
      .then(response => {    //si el fetch fue correcto el servidor devuelve una respuesta (que no tiene que ver con el catch)
        if (response.ok) {
          return response.json()   //esto TIENE QUE ESTAR para poder recibir luego el msg. lo pasa a json para poder ser leído por el siguiente .then{msg}
        }
        else {
          throw new Error(`Error de red - ${response.status}`); //esto se hace para que lo capture el .catch siguiente. lanzamos un error adrede.
        }
      })
      .then(msg => {         //ahora llega bien el equipo elegido!!
        console.log('Cambio a equipo: ', msg)
        if (!'{{ocultar}}') location.reload(); // Actualizamos la página para que tome el equipo elegido SOLO si NO está oculto los botones, o sea cuando NO estoy Editando.
      })
      .catch((error) => {       //si la ruta está mal devuelve el error por aquí aunque el status sea 200. sólo maneja errores de red.
        console.log('Ocurrió un error: ', error)
      })

  })

</script>