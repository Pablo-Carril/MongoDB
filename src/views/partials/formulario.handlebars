<form id="formEntrada" action="/api/equipos" method="post">
  <!-- manejamos todo desde el Server. ahora usamos el action y Solicitudes HHTP (POST,get,put,delete).  <option value="{{elegido}}" selected>{{elegido}} </option>  -->
  <div class="form-group">
    <label for="equipoSelect">Equipo</label>
    <select class="custom-select form-control fw-bold" name='equipo' id="equipoSelect" required=""
      style="color: {{colorOpcion this.equipo}};" title="Seleccione el equipo" autofocus>
      <option value="">Todos</option> <!--al elegir todos el value queda vacío, entonces nos pide que eligamos otro  -->
      <option value="validador" {{isSelected equipo 'validador' }}>Validador</option>
      <!-- al EDITAR necesito isSelected equipo 'Validador' y al elegir uno necesito isSelected elegido 'Validador' DEJO EQUIPO Y MODIFICO EQUIPO POR EL VALOR DE ELEGIDO EN EL SERVER? -->
      <option value="teclado" {{isSelected equipo 'teclado' selected }}>Teclado</option>
      <option value="mountinKit" {{isSelected equipo 'mountinKit' }}>MountinKit</option>
      <option value="concentrador" {{isSelected equipo 'concentrador' }}>Concentrador</option>
      <option value="otros" {{isSelected equipo 'otros' }}>Otros</option>
    </select>
    <label for="serie">Numero de serie:</label>
    <input type="number" value="{{serie}}" name="serie" id="serie" class="form-control fw-bold" min="1" max="999999999"
      title="Numero de serie" style="color: {{colorOpcion this.equipo}};" required="">
    <label for="fecha">Fecha:</label> <!--Los label for = deben apuntar al id no al name  -->
    <input type="date" value='{{fechaActual}}' name="fecha" id="fecha" class="form-control"
      title="Fecha del Caso o del día que falló">

    <label for="linea">Linea:</label>
    <select name="linea" class="custom-select form-control" id="linea" title="Seleccione la línea" required="">
      <option value=""> </option>
      <option value="85" {{isSelected linea '85' }}>85</option>
      <option value="98" {{isSelected linea '98' }}>98</option>
      <option value="307" {{isSelected linea '307' }}>307</option>
      <option value="275" {{isSelected linea '275' }}>275</option>
    </select>
    <label for="coche">Coche:</label>
    <input type="number" value="{{coche}}" name="coche" id="coche" class="form-control" title="Numero de Interno">
    <label for="problema">Problema:</label>
    <div class="form-group">
      <textarea type="number" name="problema" id="problema" cols="30" rows="1" minlength="3" maxlength="150" required=""
        class="form-control" title="Ingrese el problema que presenta">{{problema}}</textarea>
    </div>
    <label for="caso">Caso:</label>
    <div class="form-group">
      <textarea name="caso" id="caso" cols="20" rows="1" minlength="6" maxlength="8"
        class="form-control mb-3">{{caso}}</textarea>
    </div>
    <button type="submit" class="btn btn-primary text-white {{#if ocultar}}oculto{{/if}} ">Guardar</button>
    <button id="consultar" class="btn btn-primary text-white ms-3 {{#if ocultar}}oculto{{/if}} ">Historial</button>
  </div>
</form>

<style>
  .oculto {
    display: none;
  }

  #problema {
    white-space: nowrap;
    /* evita el salto de línea */
    text-overflow: ellipsis;
    /* agrega puntos suspensivos... no funciona sin el nowrap */
    overflow-x: hidden;
    /* oculta el texto que se desborda. con "auto" me agrega la barra de scroll */

    /*color: {{colorOpcion equipoElegido}};    ESTO FUNCIONA BIEN cuando retorno un color a mano desde el HELPER */
  }
</style>

<script>
  const equipoSelect = document.getElementById("equipoSelect")

  let numSerie = ""
  const serieInput = document.getElementById("serie")
  serieInput.addEventListener('input', () => {       //cada vez que se presione una tecla captura lo escrito.
    numSerie = serieInput.value
    //console.log(numSerie)
  })
  serieInput.addEventListener('keypress', e => {       //al apretar ENTER consultamos mediante redirección url a ese serie.
    if (e.key == "Enter") {    
      if (numSerie) {
        var url = '/api/equipos/' + numSerie    //+ encodeURIComponent({{serie}});
      //  guardar()   //esto era para guardar en Storage. no creo que lo vuelva a usar
        window.location.href = url
      }
      else { url = '#' }
      //e.preventDefault()
    }
  })

// al GUARDAR (submit) sacar ceros de la izquierda
  const formEntrada = document.getElementById('formEntrada')
  formEntrada.addEventListener('submit', ()=> {
      const inputNumero = document.getElementById("serie");
      const valor = inputNumero.value;
      console.log(valor)
      // Usando el método slice()
      const valorSinCeros = valor.replace(/^0+/, "").slice(0)
      console.log(valorSinCeros)
      inputNumero.value = valorSinCeros;

    }
  )

  //Al CONSULTAR
  //leemos el numero de serie ingresado por el usuario   //NO se puede acceder a Id's de otros Handlebars
  const consultarBtn = document.getElementById('consultar')
  consultarBtn.addEventListener('click', () => {
    const serieInput = document.getElementById('serie')     //leemos el serie ingresado. no se puede desde el servidor. 
    const serieNum = serieInput.value                     // SALVO que hagamos un formulario normal y nos evitamos todo este Javascript. HACERLO EN EL FUTURO
    if (serieNum) {                              //si se ingresó algo..
      var url = '/api/equipos/' + encodeURIComponent(serieNum);
    } else { url = '#' }
    //fetch(url)    //un fetch sería buena opción para enviar los datos por el body y no por la url
    console.log('{{elegido}}')    //ESTA ES LA FORMA DE leer una VARIABLE HANDLEBARS en JAVASCRIPT: entre comillas para que la trate como un string.
    guardar()
    window.location.href = url    //como el enlace tiene un # necesitamos darle la nueva url                    
  })

  //Al cambiar de equipo cambiamos los colores
  equipoSelect.addEventListener('change', () => {
    const spinnerContainer = document.querySelector('.spinner-container');
    spinnerContainer.classList.remove('escondido') // Muestra el Spinner. cuando se actualize la página se oculta solo.
    //Al cambiar de equipo cambiamos los colores:
    equipoElegido = equipoSelect.value
    //console.log(equipoElegido)
    const colores = {
      'validador': '#0d6efd',    //validadores                  
      'teclado': '#198754',      //teclados                     
      'mountinKit': '#BB0',      //MK
      'concentrador': '#fd7e14',   //concentradores
      'otros': '#555',             //otros
      '': '#333',                 //todos (que necesita estar vacío)
    };
    equipoSelect.style.color = colores[equipoElegido]
    equipoSelect.style.borderColor = colores[equipoElegido]
    equipoSelect.style.borderWidth = '3px'
    serieInput.style.color = colores[equipoElegido]
    
    

  })

</script>