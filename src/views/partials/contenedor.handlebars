<div class="container-fluid ">
  <div class="row" style="flex-wrap: nowrap;">

    <div class="col-1" style="min-width: 190px;"> <!-- este maneja el ancho del formulario. y tambiÃ©n ancho mÃ­nimo-->
      {{> formulario}} <!--todos los que se llamen de este modo deben encontrarse en partials-->
      <!-- y para actualizarce debe actualizarce toda la pÃ¡gina      text-danger  alert alert-primary   -->
    </div>

    <div class="col-9" style="min-width: 200px;"> <!-- CUIDADO: afecta a toda la tabla tambiÃ©n -->

      <div class="container " style="border: 1px solid #86b7fe; border-radius: 8px;">
        <!-- box-shadow: 0px 0px 2px 2px #86b7fe"> -->
        <!-- style="border: 1px solid #86b7fe; border-radius: 8px; box-shadow: 0px 0px 2px 2px #86b7fe" -->
        <div class="navbar-nav flex-row">

          <div style="min-width: 150px;">
            <h5 class="mt-2 p-2">
              {{resultadosDe}}
              <span class="ms-2 me-2 fw-bold " style="font-size: 1.1rem; color: {{colorOpcion this.equipo}};">
                {{busqueda}}
              </span>
            </h5>
          </div>

          <div style="display: flex; align-items: center; white-space: nowrap;" class="ms-3">
            <label for="serieHisto">Buscar Serie:</label>
            <input autofocus type="number" name="serieHisto" id="serieHisto" class="form-control fw-bold ms-2" min="1"
              max="999999" title="Ingrese serie" style="color: {{colorOpcion this.equipo}};" required="">
            <button id="consultar" class="border btn">ðŸ“‚</button>
          </div>

          <div style="display: flex; align-items: center; white-space: nowrap;">
            <label for="equiSel" class="ms-3">Filtrar por:</label>
            <select class="custom-select form-control fw-bold ms-2" name='equi' id="equiSel"
              style="color: {{colorOpcion this.equipo}}; display: inline-block; appearance: auto;"
              title="Seleccione el equipo">
              <option value="">Todos</option>
              <option value="validador" {{isSelected equipo 'validador' }}>Validador</option>
              <option value="teclado" {{isSelected equipo 'teclado' selected }}>Teclado</option>
              <option value="mountinKit" {{isSelected equipo 'mountinKit' }}>MountinKit</option>
              <option value="concentrador" {{isSelected equipo 'concentrador' }}>Concentrador</option>
              <option value="otros" {{isSelected equipo 'otros' }}>Otros</option>
            </select>

          </div>

        </div>
      </div>


      {{#if mostrarHistorial}}
      {{> historial}}
      {{/if}}

      {{#if mostrarUltimos}}
      {{> ultimos}}
      {{/if}}

      {{#if ocultar}}
      <div class="col-10 mx-auto">
        <br>
        <b>Uso de la AplicaciÃ³n:</b>
        <p>ðŸ‘‰Para grabar un equipo llenar el formulario de la derecha. primero hay que seleccionar el <b>Equipo</b>,
          luego colocar el nÃºmero de <b>serie</b>, luego la <b>fecha</b> (que por defecto es la de hoy pero se puede
          elegir
          cualquier otra), y la <b>lÃ­nea</b>. El nÃºmero de <b>interno</b> se puede omitir si no se conoce.
          El <b>Problema</b> es obligatorio ya que se tiene que especificar quÃ© le ocurriÃ³ al equipo.
          El nÃºmero de <b>Caso</b> sÃ³lo debe colocarse cuando un equipo se envÃ­a a reparaciÃ³n. pero se puede anotarlo
          para controlarlo
          sin nÃºmero de caso y hacerle un seguimiento, por ejemplo si se logra reparar en taller o ya no repite la
          falla.
          Por ejemplo: Teclado serie 1234, se mojÃ³, lo seco, y lo coloco en el interno 27 para controlar.
        </p>
        <p>ðŸ‘‰Use <b>Buscar Serie</b> para ver el <b>Historial</b> de ese equipo.
        <p>ðŸ‘‰Use <b>Filtrar por</b> para cambiar el tipo de equipo a mostrar: <br>
          de esta forma todas las consultas mostrarÃ¡n sÃ³lo ese tipo de equipo.<br>
          Para volver a ver todos debemos seleccionar <b>Todos</b>. </p>
        <p>ðŸ‘‰Cuando un equipo vuelva es necesario marcarlo como <b>entregado</b> con el check verde de la derecha: âšª / âœ…
        </p>
        ðŸ‘‰Arriba en el menÃº azul tenemos las <b>consultas:</b> <br> <b>Ultimos</b> son los ultimos anotados,
        <b>Sonda</b>
        muestra sÃ³lo lÃ­nea 85 y lÃ­nea 98, y <b>La Plata</b> sÃ³lo muestra las lÃ­neas 307 y 275 (506 no hace falta ya que
        el nÃºmero de interno lo especifica).
        <span style="color: red">Arriba de todo se muestran los mÃ¡s recientes y hacia abajo los mas
          antiguos.</span> <br>
        <br>
        <p>ðŸ‘‰<b>Buscar:</b> en la barra de bÃºsqueda podemos ingresar un problema, o un nÃºmero de caso, o un interno en
          particular.
          Por ejemplo si ingresamos "gps" nos buscarÃ¡ todos los equipos que presenten falla de GPS.</p>
      </div>
      {{/if}}

      <div class="pagination">
        {{#if pagination.hasPrevPage}}
        <a href="/api/equipos/{{serie}}?limit={{pagination.limit}}&page={{pagination.prevPage}}">Anterior</a>
        {{/if}}

        PÃ¡gina {{pagination.page}} de {{pagination.totalPages}}

        {{#if pagination.hasNextPage}}
        <a href="/api/equipos/{{serie}}?limit={{pagination.limit}}&page={{pagination.nextPage}}">Siguiente</a>
        {{/if}}
      </div>


    </div>

    <!--  <div id="nota"></div> -->

  </div>
</div>

<style>
  .pagination a {
  margin: 0 5px;
  text-decoration: none;
  padding: 5px 10px;
  border: 1px solid #ccc;
}

.pagination a:hover {
  background-color: #f0f0f0;
}
</style>

<script>
  //SELECT para FILTRO por EQUIPO:
  const equiSel = document.getElementById("equiSel")

  equiSel.addEventListener('change', () => {
    const spinnerContainer = document.querySelector('.spinner-container');
    spinnerContainer.classList.remove('escondido') // Muestra el Spinner. cuando se actualize la pÃ¡gina se oculta solo.

    equipoElegido = equiSel.value
    //ENVIAMOS el equipoElegido al servidor:
    const dato = JSON.stringify({ 'equipo': equipoElegido })
    console.log(dato)
    fetch('/equipoElegido', {   // + equipoElegido, { no hace falta mandarlo por la ruta. va por el body.
      method: 'POST',             //PORQUE si la ruta estÃ¡ mal el server me devuelve status 200 ????????
      headers: {
        'Content-Type': 'application/json',   //sin esto no anda.
      },
      body: dato,
    })
      .then(response => {    //si el fetch fue correcto el servidor devuelve una respuesta (que no tiene que ver con el catch)
        if (response.ok) {   //el ok es parte de una Api Rest, asÃ­ como el body.
          return response.json()   //esto TIENE QUE ESTAR para poder recibir luego el msg. lo pasa a json para poder ser leÃ­do por el siguiente .then{msg}
        }
        else {
          throw new Error(`Error de red - ${response.status}`); //esto se hace para que lo capture el .catch siguiente. lanzamos un error adrede.
        }
      })
      .then(msg => {         //ahora llega bien el equipo elegido!!
        console.log('Cambio a equipo: ', msg)
        if (!'{{ocultar}}') {
          location.reload(); // Actualizamos la pÃ¡gina para que tome el equipo elegido SOLO si NO estÃ¡ oculto los botones, o sea cuando NO estoy Editando.
        }
      })  //deberÃ­a chequear otra cosa junto con ocultar, para no depender de esa variable, que tiene otra funciÃ³n.
      // YA CREÃ‰ UN NUEVO FORMULARIO de EDICION asÃ­ que ocultar ya no hace falta
      .catch((error) => {       //si la ruta estÃ¡ mal devuelve el error por aquÃ­ aunque el status sea 200. sÃ³lo maneja errores de red.
        console.log('OcurriÃ³ un error: ', error)
      })
  })

  //Al CONSULTAR
  //leemos el numero de serie ingresado por el usuario   //NO se puede acceder a Id's de otros Handlebars
  const consultarBtn = document.getElementById('consultar')
  const serieHisto = document.getElementById('serieHisto')

  consultarBtn.addEventListener('click', () => {
    const spinnerContainer = document.querySelector('.spinner-container');
    spinnerContainer.classList.remove('escondido') // Muestra el Spinner. cuando se actualize la pÃ¡gina se oculta solo.

    const numSerie = serieHisto.value
    if (numSerie === '' || isNaN(numSerie)) {
      //podrÃ­amos mostrar un mensaje de error
      serieHisto.setCustomValidity('Ingrese un nÃºmero de serie');
      serieHisto.reportValidity();
      spinnerContainer.classList.add('escondido')  // OCULTAMOS el spinner!
    }
    else {
      serieHisto.setCustomValidity('');
      var url = '/api/equipos/' + numSerie    //+ encodeURIComponent({{serie}});
      window.location.href = url
    }
  })

  serieHisto.addEventListener('keydown', e => {     //al apretar ENTER consultamos mediante redirecciÃ³n url a ese serie.
    if (e.key == "Enter") {
      e.preventDefault()
      const spinnerContainer = document.querySelector('.spinner-container');
      spinnerContainer.classList.remove('escondido') // Muestra el Spinner. cuando se actualize la pÃ¡gina se oculta solo.

      const numSerie = serieHisto.value
      if (numSerie === '' || isNaN(numSerie)) {
        // simplemente no hacemos nada. podrÃ­amos mostrar un mensaje de error pero no creo que haga falta.
        spinnerContainer.classList.add('escondido')  // OCULTAMOS el spinner!
      }
      else {
        var url = '/api/equipos/' + numSerie    //+ encodeURIComponent({{serie}});
        window.location.href = url
      }
    }
  })
</script>