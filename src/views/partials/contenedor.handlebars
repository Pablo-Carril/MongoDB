<div class="container-fluid ">
  <div class="row" style="flex-wrap: nowrap;">

    <div class="col-1" style="min-width: 190px;"> <!-- este maneja el ancho del formulario. y tambi√©n ancho m√≠nimo-->
      {{> formulario}}
    </div>

    <div class="col-9" style="min-width: 200px;"> <!-- CUIDADO: afecta a toda la tabla tambi√©n -->

      <div class="container"
        style="border: 1px solid #ccc; min-width: 860px; border-radius: 8px; background-color: #e3eeff;">
        <!-- #8ab9ff background-color: rgb(209, 247, 251); #5195fb;"> -->
        <!-- box-shadow: 0px 0px 2px 2px #86b7fe"> -->
        <!-- style="border: 1px solid #86b7fe; border-radius: 8px; box-shadow: 0px 0px 2px 2px #86b7fe" -->

        <div class="navbar-nav flex-row">

          <div style="min-width: 150px;">
            <h6 class="mt-2 p-2">
              <span class="resultadode" style="font-size: 1.1rem;">{{resultadosDe}} </span>
              <span class="me-2 fw-bold " style="font-size: 1.1rem; color: rgb(250, 87, 51) ;">
                <!-- rgb(252, 75, 75) {{colorOpcion this.equipo}} -->
                {{busqueda}}
              </span>
            </h6>
          </div>

          <div style="display: flex; align-items: center; white-space: nowrap;" class="ms-3">
            <label for="serieHisto">Buscar Serie:</label>

            <input autofocus type="number" name="serieHisto" id="serieHisto" class="form-control fw-bold ms-2" min="1"
              max="999999" title="Ingrese serie" style="color: {{colorOpcion this.equipo}}; min-width: 90px;"
              required="" value = "{{busqueda}}">
            <button id="consultar" class="border btn ms-1" style="background-color: #fff;">üìÇ</button>
          </div>

          <div style="display: flex; align-items: center; white-space: nowrap;">

            <label for="equiSel" class="ms-3">Filtrar por:</label>
            <select class="custom-select form-control fw-bold ms-2" name='equi' id="equiSel"
              style="color: {{colorOpcion this.equipo}}; min-width: 90px; display: inline-block; appearance: auto;"
              title="Seleccione el equipo">
              <option value="">Todos</option>
              <!--<option value="validador" {{isSelected equipo 'validador' }}>Validador</option> -->
               {{#each inventario}} 
                <option value="{{this}}" {{isSelected ../equipo this}}>{{this}}</option> 
               {{/each}}
            </select>

            <label for="reparados" class="ms-4">Reparados:</label>
            <select name="reparados" id="reparados" class="ms-2 custom-select form-control ">
              <option value="todos" {{isSelected reparacion 'todos' }}>Todos</option>
              <option value="si" {{isSelected reparacion 'si' }}>Si</option>
              <option value="no" {{isSelected reparacion 'no' }}>No</option>
            </select>

          </div>

        </div>
      </div>


      {{#if mostrarHistorial}}
      {{> historial}}
      {{/if}}

      {{#if mostrarUltimos}}
      {{> ultimos}}
      {{/if}}

      {{#if ocultar}}
      <div class="col-10 mx-auto">
        <br>
        <b>Uso de la Aplicaci√≥n: ESTO YA NO SE USA en la ruta ra√≠z * BORRAR * (redirigimos a /ultimos) </b>
      </div>
      {{/if}}

      <div class="pagination" id="pagination">
        <a href="{{pagination.url}}&page=1" class="btn btn-primary me-4">Inicio</a>

        {{#if pagination.hasPrevPage}}
        <a href="{{pagination.url}}&page={{pagination.prevPage}}">‚è™</a>
        {{/if}}

        P√°gina {{pagination.page}} de {{pagination.totalPages}}

        {{#if pagination.hasNextPage}}
        <a href="{{pagination.url}}&page={{pagination.nextPage}}">‚è©</a>
        {{/if}}

        <div id="pagination-data" data-total-pages="{{pagination.totalPages}}" style="display: none;"></div>
      </div>

      <div> 
        <br> <br> 
      </div>

    </div>


  </div>
</div>

<style>
  .pagination a {
    margin: 0 5px;
    text-decoration: none;
    padding: 2px 6px;
    /* border: 1px solid #ccc;*/
  }

  .pagination a:hover {
    background-color: #bbb;
  }

  .resultadode {
    padding: 7px;
    border-radius: 8px;
    font-weight: 500;
    /* background-color: #5195fb; //#0056d6;  */
  }
</style>

<script>
  //SELECT para FILTRO por EQUIPO:
  const equiSel = document.getElementById("equiSel")

  equiSel.addEventListener('change', () => {
    const spinnerContainer = document.querySelector('.spinner-container');
    spinnerContainer.classList.remove('escondido') // Muestra el Spinner. cuando se actualize la p√°gina se oculta solo.

    equipoElegido = equiSel.value
    //ENVIAMOS el equipoElegido al servidor:
    const dato = JSON.stringify({ 'equipo': equipoElegido })
    //console.log(dato)
    fetch('/equipoElegido', {   // + equipoElegido, { no hace falta mandarlo por la ruta. va por el body.
      method: 'POST',             //PORQUE si la ruta est√° mal el server me devuelve status 200 ????????
      headers: {
        'Content-Type': 'application/json',   //sin esto no anda.
      },
      body: dato,
    })
      .then(response => {    //si el fetch fue correcto el servidor devuelve una respuesta (que no tiene que ver con el catch)
        if (response.ok) {   //el ok es parte de una Api Rest, as√≠ como el body.
          spinnerContainer.classList.add('escondido')
          return response.json()   //esto TIENE QUE ESTAR para poder recibir luego el msg. lo pasa a json para poder ser le√≠do por el siguiente .then{msg}
        }
        else {
          throw new Error(`Error de red - ${response.status}`); //esto se hace para que lo capture el .catch siguiente. lanzamos un error adrede.
        }
      })
      .then(msg => {         //ahora llega bien el equipo elegido!!
        console.log('Cambio a equipo: ', msg)
        if (!'{{ocultar}}') {
          location.reload(); // Actualizamos la p√°gina para que tome el equipo elegido SOLO si NO est√° oculto los botones, o sea cuando NO estoy Editando.
        }
      })  //deber√≠a chequear otra cosa junto con ocultar, para no depender de esa variable, que tiene otra funci√≥n.
      // YA CRE√â UN NUEVO FORMULARIO de EDICION as√≠ que ocultar ya no hace falta
      .catch((error) => {       //si la ruta est√° mal devuelve el error por aqu√≠ aunque el status sea 200. s√≥lo maneja errores de red.
        console.log('Ocurri√≥ un error: ', error)
      })
  })

  //Al CONSULTAR
  //leemos el numero de serie ingresado por el usuario   //NO se puede acceder a Id's de otros Handlebars
  const consultarBtn = document.getElementById('consultar')
  const serieHisto = document.getElementById('serieHisto')

  consultarBtn.addEventListener('click', () => {
    const spinnerContainer = document.querySelector('.spinner-container');
    spinnerContainer.classList.remove('escondido') // Muestra el Spinner. cuando se actualize la p√°gina se oculta solo.

    const numSerie = serieHisto.value
    if (numSerie === '' || isNaN(numSerie)) {
      //podr√≠amos mostrar un mensaje de error
      serieHisto.setCustomValidity('Ingrese un n√∫mero de serie');
      serieHisto.reportValidity();
      spinnerContainer.classList.add('escondido')  // OCULTAMOS el spinner!
    }
    else {
      serieHisto.setCustomValidity('');
      var url = '/api/equipos/' + numSerie    //+ encodeURIComponent({{serie}});
      window.location.href = url
    }
  })

  serieHisto.addEventListener('keydown', e => {     //al apretar ENTER consultamos mediante redirecci√≥n url a ese serie.
    if (e.key == "Enter") {
      e.preventDefault()
      const spinnerContainer = document.querySelector('.spinner-container');
      spinnerContainer.classList.remove('escondido') // Muestra el Spinner. cuando se actualize la p√°gina se oculta solo.

      const numSerie = serieHisto.value
      if (numSerie === '' || isNaN(numSerie)) {
        // simplemente no hacemos nada. podr√≠amos mostrar un mensaje de error pero no creo que haga falta.
        spinnerContainer.classList.add('escondido')  // OCULTAMOS el spinner!
      }
      else {
        var url = '/api/equipos/' + numSerie    //+ encodeURIComponent({{serie}});
        window.location.href = url
      }
    }
  })

  const pagination = document.getElementById("pagination");
  const paginationData = document.getElementById("pagination-data");
  const totalPages = parseInt(paginationData.getAttribute("data-total-pages"), 10);

  if (!totalPages || totalPages <= 1) {  //si no hay p√°ginas o no existen datos de paginaci√≥n ocultar todo
    pagination.style.display = "none";
  }


const reparados = document.getElementById("reparados")
reparados.addEventListener('change', ()=> {
   let reparado = reparados.value
   //let equipoElegido = equiSel.value   //VOY A TRATAR DE NO! - tambi√©n tengo que enviarlo, si no se me cambia a todos
   const dato = JSON.stringify({ 'reparado': reparado }) //, 'equipo': equipoElegido })

   fetch('/reparado', {   
      method: 'POST',            
      headers: {
        'Content-Type': 'application/json',  
      },
      body: dato,
    })
      .then(response => {   
        if (response.ok) {  
          //spinnerContainer.classList.add('escondido')
          return response.json()   
        }
        else {
          throw new Error(`Error de red - ${response.status}`);
        }
      })
      .then(msg => {        
        console.log('equipo reparado: ', msg)
        //ANDA TODO perfecto, falta que ULTIMOS y los dem√°s se actualizen con el nuevo filtro
        
        if (!'{{ocultar}}') {
          location.reload(); // Actualizamos la p√°gina para que lo tome
        }
      }) 
      .catch((error) => {      
        console.log('Ocurri√≥ un error: ', error)
      })
      
  })


</script>

<!-- <script src="scripts.js"> </script> -->