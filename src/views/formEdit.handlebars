<div class="Editor">

  <h4>Editar registro: </h4>
  <div>
    {{!-- {{>formularioanterior ocultar=true}} PRUEBO FORMULARIO APARTE DEL PRINCIPAL --}}
    <!--podemos enviar variables (nuevas) al llamar a parciales (ocultar es para ocultar el boton guardar y consultar)-->

    <form id="formEdit" action="/api/equipos" method="post">
      <!-- manejamos todo desde el Server. ahora usamos el action y Solicitudes HHTP (POST,get,put,delete).  <option value="{{elegido}}" selected>{{elegido}} </option>  -->
      <div class="form-group">
        <label for="equipoSelect">Equipo</label>
        <select class="custom-select form-control fw-bold" name='equipo' id="equipoSelect" required=""
          style="color: {{colorOpcion this.equipo}};" title="Seleccione el equipo" autofocus>
          <option value="">Todos</option>
          <!--al elegir todos el value queda vacío, entonces nos pide que eligamos otro  -->
          <option value="validador" {{isSelected equipo 'validador' }}>Validador</option>
          <!-- al EDITAR necesito isSelected equipo 'Validador' y al elegir uno necesito isSelected elegido 'Validador' DEJO EQUIPO Y MODIFICO EQUIPO POR EL VALOR DE ELEGIDO EN EL SERVER? -->
          <option value="teclado" {{isSelected equipo 'teclado' selected }}>Teclado</option>
          <option value="mountinKit" {{isSelected equipo 'mountinKit' }}>MountinKit</option>
          <option value="concentrador" {{isSelected equipo 'concentrador' }}>Concentrador</option>
          <option value="NVR" {{isSelected equipo 'NVR' }}>NVR</option>
        </select>
        <label for="serie">Numero de serie:</label>
        <input type="number" value="{{serie}}" name="serie" id="serie" class="form-control fw-bold" min="1"
          max="999999999" title="Numero de serie" style="color: {{colorOpcion this.equipo}};" required="">
        <label for="fecha">Fecha:</label> <!--Los label for = deben apuntar al id no al name  -->
        <input type="date" value='{{fechaActual}}' name="fecha" id="fecha" class="form-control"
          title="Fecha del Caso o del día que falló">

        <label for="linea">Linea:</label>
        <select name="linea" class="custom-select form-control" id="linea" title="Seleccione la línea" required="">
          <option value=""> </option>
          <option value="85" {{isSelected linea '85' }}>85</option>
          <option value="98" {{isSelected linea '98' }}>98</option>
          <option value="307" {{isSelected linea '307' }}>307</option>
          <option value="275" {{isSelected linea '275' }}>275</option>
        </select>
        <label for="coche">Coche:</label>
        <input type="number" value="{{coche}}" name="coche" id="coche" class="form-control" title="Numero de Interno">
        <label for="problema">Problema:</label>
        <div class="form-group">
          <textarea type="number" name="problema" id="problema" cols="30" rows="1" minlength="3" maxlength="150"
            required="" class="form-control" title="Ingrese el problema que presenta">{{problema}}</textarea>
        </div>
        <label for="caso">Caso:</label>
        <div class="form-group">
          <textarea name="caso" id="caso" cols="20" rows="1" minlength="6" maxlength="8"
            class="form-control mb-3">{{caso}}</textarea>
        </div>

        {{!-- <button type="submit" class="btn btn-primary text-white {{#if ocultar}}oculto{{/if}} ">Guardar</button>
        <button id="consultar" class="btn btn-primary text-white ms-3 {{#if ocultar}}oculto{{/if}} ">Historial</button>
        --}}

      </div>
    </form>

    <style>
      .oculto {
        display: none;
      }

      #problema {
        white-space: nowrap;
        /* evita el salto de línea */
        text-overflow: ellipsis;
        /* agrega puntos suspensivos... no funciona sin el nowrap */
        overflow-x: hidden;
        /* oculta el texto que se desborda. con "auto" me agrega la barra de scroll */

        /*color: {{colorOpcion equipoElegido}};    ESTO FUNCIONA BIEN cuando retorno un color a mano desde el HELPER */
      }
    </style>

  </div>

  <div class="botones">
    <button id="borrar" class="btn btn-danger text-white ms-4">Borrar</button>
    <button id="actualizar" class="btn btn-info text-white ms-4">Actualizar</button>
    <a href="/api/equipos/{{serie}}" class="btn btn-primary text-white ms-4">Cancelar</a>
  </div>

  {{>popup}}

</div>

<script>
  const formulario = document.getElementById('formEdit')
  borrar = document.getElementById('borrar')

  borrar.addEventListener('click', () => {
    mostrarPopup()    //pedimos confirmación para borrar
  })

  function confirmarBorrado() {
    const spinnerContainer = document.querySelector('.spinner-container');
    spinnerContainer.classList.remove('escondido') // Muestra el Spinner. cuando se actualize la página se oculta solo.
    
    fetch('/api/equipos/delete/{{id}}', {    //siempre tiene que comenzar con la raíz (/) y TODA la ruta. con fetch no se pueden acortar las rutas como en los routers.
      method: 'DELETE',                         //porque estamos del lado del cliente
      headers: {
        'Content-Type': 'application/json',
        // Puedes agregar más encabezados si es necesario
      },
      body: JSON.stringify({ id: '{{id}}', serie: {{ serie }} }), //ENTONCES ES POSIBLE LEER VARIABLES DE HBS EN JAVASCRPT!!!
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`Error de red - ${response.status}`);
        }
        return response.json();  // Si esperas una respuesta JSON. el return es necesario para procesar el siguiente then.
      })
    .then(msg => {
      console.log('Se eliminó el ID: {{id}}', msg)
      window.location.href = `/api/equipos/{{serie}}`;    // volvemos a ese serie
      history.replaceState({}, '', `/api/equipos/{{serie}}`);  //evitamos que vuelva al formulario al retroceder la página. tienen que estar las dos líneas.
    })  //muestro el mensaje en la consola del cliente
    .catch((error) => { console.log('Ocurrió un error: ', error) })
    }

  actualizar = document.getElementById('actualizar')
  actualizar.addEventListener('click', () => {
    const spinnerContainer = document.querySelector('.spinner-container');
    spinnerContainer.classList.remove('escondido') // Muestra el Spinner. cuando se actualize la página se oculta solo.

    //Leer Los datos actualizados:
    const datosForm = new FormData(formulario)         //se pasa el OBJETO formulario
    const datosJSON = JSON.stringify(Object.fromEntries(datosForm.entries()));   // PRUEBO mejor como JSON
    fetch('/api/equipos/actualizar/{{id}}', {
      method: 'PUT',          //exite otra forma de enviar el formulario datosForm sin pasar a Json, pero no pude hacer que el servidor lo lea.
      headers: {
        'Content-Type': 'application/json',   //sin esto no anda.
      },
      //Enviamos los DATOS por el BODY para probar. funciona bien como Json.
      body: datosJSON  //otra forma es con body: JSON.stringify({ y todos los datos individuales con doble llaves de handlebars.
    })
      .then(response => {
        if (!response.ok) {
          throw new Error(`Error de red - ${response.status}`);
        }
        return response.json();
      })
      .then(msg => {
        console.log('Se actualizó el ID: {{id}}', msg)
        window.location.href = `/api/equipos/{{serie}}`;    // volvemos a ese serie
        // while (history.length > 1) {  //NO FUNCIONA SE QUEDA PENSANDO...
        //   history.back();  //borramos todo el historial anterior de la pestaña.
        // }
        history.replaceState({}, '', `/api/equipos/{{serie}}`);
      })  //muestro el mensaje en la consola del cliente

      .catch(err => { console.log('Ocurrió un error: ', err) })
  })

  // CUIDADO: HANDLEBARS también reemplaza las variables dentro de los COMENTARIOS, y puede traer problemas
  // al llegar un dato con errores o inclusive un Enter en un string, y hace fallar el script en el NAVEGADOR.

</script>

<style>
  .Editor {
    height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  #formEdit {
    min-width: 500px;
  }

  .botones {
    min-width: 500px;
    display: flex;
    justify-content: space-around;
  }
</style>