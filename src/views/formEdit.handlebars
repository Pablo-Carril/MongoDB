<div class="Editor">

  <h3>Editar registro: </h3>
  <div>
    {{>formulario ocultar=true}} <!--podemos enviar datos al llamar a parciales (oculta es para el boton)-->
  </div>

  <div class="botones">
    <button id="borrar" class="btn btn-danger text-white ms-4">Borrar</button>
    <button id="actualizar" class="btn btn-primary text-white ms-4">Actualizar</button>
  </div>

  {{>popup}}

</div>

<script>
  const formulario = document.getElementById('formEntrada')
  borrar = document.getElementById('borrar')

  //function mostrarPopup() {
  //   document.getElementById('popup').style.display = 'block';
  // }

  borrar.addEventListener('click', () => {
    mostrarPopup()    //pedimos confirmación para borrar
  })

  function confirmarBorrado() {
    fetch('/api/validadores/delete/{{id}}', {    //siempre tiene que comenzar con la raíz (/) y TODA la ruta. con fetch no se pueden acortar las rutas como en los routers.
      method: 'DELETE',                         //porque estamos del lado del cliente
      headers: {
        'Content-Type': 'application/json',
        // Puedes agregar más encabezados si es necesario
      },
      body: JSON.stringify({ id: '{{id}}', serie: {{ serie }} }),
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`Error de red - ${response.status}`);
        }
        return response.json();  // Si esperas una respuesta JSON. el return es necesario para procesar el siguiente then.
      })
    .then(msg => {
      console.log('Se eliminó el ID: {{id}}', msg)
      window.location.href = `/api/validadores/{{serie}}`;    // volvemos a ese serie
    })  //muestro el mensaje en la consola del cliente
    .catch(err => { console.log('Ocurrió un error: ', err) })
    }

  actualizar = document.getElementById('actualizar')
  actualizar.addEventListener('click', () => {
    //Leer Los datos actualizados:
    const datosForm = new FormData(formulario)         //se pasa el OBJETO formulario
    const datosJSON = JSON.stringify(Object.fromEntries(datosForm.entries()));   // PRUEBO mejor como JSON
    fetch('/api/validadores/actualizar/{{id}}', {
      method: 'PUT',          //exite otra forma de enviar el formulario datosForm sin pasar a Json, pero no pude hacer que el servidor lo lea.
      headers: {
        'Content-Type': 'application/json',   //sin esto no anda.
      },
      //Enviamos los DATOS por el BODY para probar. funciona bien como Json.
      body: datosJSON,
      //body: JSON.stringify({      //esta es otra forma que funciona muy bien. de forma individual.
      // id:'{{id}}',
      //serie: '{{serie}}',    
      //linea: '{{linea}}',
      //coche: '{{coche}}',
      //problema: '{{problema}}',
      //caso: '{{caso}}'
      // }),
    })
      .then(response => {
        if (!response.ok) {
          throw new Error(`Error de red - ${response.status}`);
        }
        return response.json();
      })
      .then(msg => {
        console.log('Se actualizó el ID: {{id}}', msg)
        window.location.href = `/api/validadores/{{serie}}`;    // volvemos a ese serie
      })  //muestro el mensaje en la consola del cliente

      .catch(err => { console.log('Ocurrió un error: ', err) })
  })
</script>

<style>
  .Editor {
    height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  #formEntrada {
    min-width: 500px;
  }

  .botones {
    min-width: 500px;
    display: flex;
    justify-content: space-around;
  }

</style>